<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Secure_Backend_and_REST_Service" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Secure_Service_With_REST_Back_End_Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="accountId" elementType="Argument">
              <stringProp name="Argument.name">accountId</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9094</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">sleeptime</stringProp>
              <stringProp name="Header.value">0</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">pass1</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS POST  Request - Create Account" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;Account_Details&quot;:{&#xd;
      &quot;Bank_Account_No&quot;:&quot;${accountId}&quot;,&#xd;
      &quot;Name&quot;:&quot;Kasun&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/account</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS GET Request - Retrive Account Details" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/account/${accountId}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS PUT Request - Update Account Details" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;Account_Details&quot;:{&#xd;
      &quot;Bank_Account_No&quot;:&quot;${accountId}&quot;,&#xd;
      &quot;Name&quot;:&quot;Updated Name - Kasun Updated&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/account/${accountId}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP DELETE Request - Delete Account Details" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/account/${accountId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Slow_Back_End_Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">sleeptime</stringProp>
              <stringProp name="Header.value">3000</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">pass1</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="accountId" elementType="Argument">
              <stringProp name="Argument.name">accountId</stringProp>
              <stringProp name="Argument.value">ACC1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9094</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read JSON File with Dealy " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/readJSONFile</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Write JSON File with Dealy " enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;Account_Details&quot;:{&#xd;
      &quot;Bank_Account_No&quot;:&quot;${accountId}&quot;,&#xd;
      &quot;Name&quot;:&quot;Kasun&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/writeJSONFile</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - Provide Different Content Types Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9094</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">pass1</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="accountId" elementType="Argument">
              <stringProp name="Argument.name">accountId</stringProp>
              <stringProp name="Argument.value">ACC1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">sleeptime</stringProp>
              <stringProp name="Header.value">2000</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request readxmltojson" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/readxmltojson</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request readjsontoxml" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/readjsontoxml</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Content Type Conversion without File Read / Write" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="accountId" elementType="Argument">
              <stringProp name="Argument.name">accountId</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9094</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">pass1</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="json to xml HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;Account_Details&quot;:{&#xd;
      &quot;Bank_Account_No&quot;:&quot;${accountId}&quot;,&#xd;
      &quot;Name&quot;:&quot;Kasun&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/jsontoxml</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">sleeptime</stringProp>
                <stringProp name="Header.value">2000</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname"></stringProp>
            <stringProp name="RegexExtractor.regex"></stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </RegexExtractor>
          <hashTree/>
          <CompareAssertion guiclass="TestBeanGUI" testclass="CompareAssertion" testname="Compare Assertion" enabled="true">
            <boolProp name="compareContent">true</boolProp>
            <longProp name="compareTime">-1</longProp>
            <collectionProp name="stringsToSkip"/>
          </CompareAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="XML to JSON HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  &#xd;
&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  &#xd;
  &lt;Customers&gt;  &#xd;
    &lt;Customer CustomerID=&quot;GREAL&quot;&gt;  &#xd;
      &lt;CompanyName&gt;Great Lakes Food Market&lt;/CompanyName&gt;  &#xd;
      &lt;ContactName&gt;Howard Snyder&lt;/ContactName&gt;  &#xd;
      &lt;ContactTitle&gt;Marketing Manager&lt;/ContactTitle&gt;  &#xd;
      &lt;Phone&gt;(503) 555-7555&lt;/Phone&gt;  &#xd;
      &lt;FullAddress&gt;  &#xd;
        &lt;Address&gt;2732 Baker Blvd.&lt;/Address&gt;  &#xd;
        &lt;City&gt;Eugene&lt;/City&gt;  &#xd;
        &lt;Region&gt;OR&lt;/Region&gt;  &#xd;
        &lt;PostalCode&gt;97403&lt;/PostalCode&gt;  &#xd;
        &lt;Country&gt;USA&lt;/Country&gt;  &#xd;
      &lt;/FullAddress&gt;  &#xd;
    &lt;/Customer&gt;  &#xd;
    &lt;Customer CustomerID=&quot;HUNGC&quot;&gt;  &#xd;
      &lt;CompanyName&gt;Hungry Coyote Import Store&lt;/CompanyName&gt;  &#xd;
      &lt;ContactName&gt;Yoshi Latimer&lt;/ContactName&gt;  &#xd;
      &lt;ContactTitle&gt;Sales Representative&lt;/ContactTitle&gt;  &#xd;
      &lt;Phone&gt;(503) 555-6874&lt;/Phone&gt;  &#xd;
      &lt;Fax&gt;(503) 555-2376&lt;/Fax&gt;  &#xd;
      &lt;FullAddress&gt;  &#xd;
        &lt;Address&gt;City Center Plaza 516 Main St.&lt;/Address&gt;  &#xd;
        &lt;City&gt;Elgin&lt;/City&gt;  &#xd;
        &lt;Region&gt;OR&lt;/Region&gt;  &#xd;
        &lt;PostalCode&gt;97827&lt;/PostalCode&gt;  &#xd;
        &lt;Country&gt;USA&lt;/Country&gt;  &#xd;
      &lt;/FullAddress&gt;  &#xd;
    &lt;/Customer&gt;  &#xd;
    &lt;Customer CustomerID=&quot;LAZYK&quot;&gt;  &#xd;
      &lt;CompanyName&gt;Lazy K Kountry Store&lt;/CompanyName&gt;  &#xd;
      &lt;ContactName&gt;John Steel&lt;/ContactName&gt;  &#xd;
      &lt;ContactTitle&gt;Marketing Manager&lt;/ContactTitle&gt;  &#xd;
      &lt;Phone&gt;(509) 555-7969&lt;/Phone&gt;  &#xd;
      &lt;Fax&gt;(509) 555-6221&lt;/Fax&gt;  &#xd;
      &lt;FullAddress&gt;  &#xd;
        &lt;Address&gt;12 Orchestra Terrace&lt;/Address&gt;  &#xd;
        &lt;City&gt;Walla Walla&lt;/City&gt;  &#xd;
        &lt;Region&gt;WA&lt;/Region&gt;  &#xd;
        &lt;PostalCode&gt;99362&lt;/PostalCode&gt;  &#xd;
        &lt;Country&gt;USA&lt;/Country&gt;  &#xd;
      &lt;/FullAddress&gt;  &#xd;
    &lt;/Customer&gt;  &#xd;
    &lt;Customer CustomerID=&quot;LETSS&quot;&gt;  &#xd;
      &lt;CompanyName&gt;Let&apos;s Stop N Shop&lt;/CompanyName&gt;  &#xd;
      &lt;ContactName&gt;Jaime Yorres&lt;/ContactName&gt;  &#xd;
      &lt;ContactTitle&gt;Owner&lt;/ContactTitle&gt;  &#xd;
      &lt;Phone&gt;(415) 555-5938&lt;/Phone&gt;  &#xd;
      &lt;FullAddress&gt;  &#xd;
        &lt;Address&gt;87 Polk St. Suite 5&lt;/Address&gt;  &#xd;
        &lt;City&gt;San Francisco&lt;/City&gt;  &#xd;
        &lt;Region&gt;CA&lt;/Region&gt;  &#xd;
        &lt;PostalCode&gt;94117&lt;/PostalCode&gt;  &#xd;
        &lt;Country&gt;USA&lt;/Country&gt;  &#xd;
      &lt;/FullAddress&gt;  &#xd;
    &lt;/Customer&gt;  &#xd;
  &lt;/Customers&gt;  &#xd;
  &lt;Orders&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;6&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-05-06T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-05-20T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-05-09T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;3.35&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;8&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-07-04T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-08-01T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-07-14T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;4.42&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;1&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-07-31T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-08-28T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-08-05T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;116.53&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-07-31T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-08-28T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-08-04T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;18.53&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;6&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-09-04T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-10-02T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-09-10T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;1&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;57.15&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;3&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-09-25T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-10-23T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-09-30T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;3&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;76.13&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1998-01-06T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1998-02-03T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1998-02-04T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;719.78&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;3&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1998-03-09T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1998-04-06T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1998-03-18T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;33.68&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;3&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1998-04-07T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1998-05-05T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1998-04-15T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;25.19&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1998-04-22T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1998-05-20T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo&gt;  &#xd;
        &lt;ShipVia&gt;3&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;18.84&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;GREAL&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1998-04-30T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1998-06-11T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo&gt;  &#xd;
        &lt;ShipVia&gt;3&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;14.01&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Great Lakes Food Market&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;2732 Baker Blvd.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Eugene&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97403&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;HUNGC&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;3&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1996-12-06T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-01-03T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1996-12-09T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;20.12&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Hungry Coyote Import Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;City Center Plaza 516 Main St.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Elgin&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97827&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;HUNGC&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;1&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1996-12-25T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-01-22T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-01-03T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;3&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;30.34&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Hungry Coyote Import Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;City Center Plaza 516 Main St.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Elgin&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97827&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;HUNGC&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;3&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-01-15T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-02-12T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-01-24T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;1&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;0.2&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Hungry Coyote Import Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;City Center Plaza 516 Main St.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Elgin&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97827&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;HUNGC&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-07-16T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-08-13T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-07-21T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;1&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;45.13&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Hungry Coyote Import Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;City Center Plaza 516 Main St.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Elgin&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97827&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;HUNGC&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;8&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-09-08T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-10-06T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-10-15T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;1&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;111.29&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Hungry Coyote Import Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;City Center Plaza 516 Main St.&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Elgin&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;OR&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;97827&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;LAZYK&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;1&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-03-21T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-04-18T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-04-10T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;3&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;7.48&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Lazy K Kountry Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;12 Orchestra Terrace&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Walla Walla&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;WA&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;99362&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;LAZYK&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;8&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-05-22T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-06-19T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-06-26T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;11.92&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Lazy K Kountry Store&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;12 Orchestra Terrace&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;Walla Walla&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;WA&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;99362&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;1&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-06-25T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-07-23T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-07-04T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;13.73&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Let&apos;s Stop N Shop&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;87 Polk St. Suite 5&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;San Francisco&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;CA&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;94117&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;8&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-10-27T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-11-24T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-11-05T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;51.44&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Let&apos;s Stop N Shop&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;87 Polk St. Suite 5&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;San Francisco&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;CA&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;94117&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;6&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1997-11-10T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1997-12-08T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1997-11-21T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;45.97&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Let&apos;s Stop N Shop&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;87 Polk St. Suite 5&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;San Francisco&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;CA&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;94117&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
    &lt;Order&gt;  &#xd;
      &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  &#xd;
      &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  &#xd;
      &lt;OrderDate&gt;1998-02-12T00:00:00&lt;/OrderDate&gt;  &#xd;
      &lt;RequiredDate&gt;1998-03-12T00:00:00&lt;/RequiredDate&gt;  &#xd;
      &lt;ShipInfo ShippedDate=&quot;1998-02-13T00:00:00&quot;&gt;  &#xd;
        &lt;ShipVia&gt;2&lt;/ShipVia&gt;  &#xd;
        &lt;Freight&gt;90.97&lt;/Freight&gt;  &#xd;
        &lt;ShipName&gt;Let&apos;s Stop N Shop&lt;/ShipName&gt;  &#xd;
        &lt;ShipAddress&gt;87 Polk St. Suite 5&lt;/ShipAddress&gt;  &#xd;
        &lt;ShipCity&gt;San Francisco&lt;/ShipCity&gt;  &#xd;
        &lt;ShipRegion&gt;CA&lt;/ShipRegion&gt;  &#xd;
        &lt;ShipPostalCode&gt;94117&lt;/ShipPostalCode&gt;  &#xd;
        &lt;ShipCountry&gt;USA&lt;/ShipCountry&gt;  &#xd;
      &lt;/ShipInfo&gt;  &#xd;
    &lt;/Order&gt;  &#xd;
  &lt;/Orders&gt;  &#xd;
&lt;/Root&gt;  </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/xmltojson</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/xml</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">sleeptime</stringProp>
                <stringProp name="Header.value">2000</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="API Life Cycle - Capture Subscription Notifications " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="accountId" elementType="Argument">
              <stringProp name="Argument.name">accountId</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/xml</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">sleeptime</stringProp>
              <stringProp name="Header.value">2000</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9094</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">pass1</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Notification to service - HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;ns:Event xmlns:ns=&quot;http://wso2.org/ns/2011/01/event&#xd;
ing/registry/event&quot;&gt;&lt;ns:Message&gt;[APILifeCycle] The LifeCycle State Changed from &apos;Created&apos; to &apos;Published&apos; for resource at /_system/governance/apimgt/applicationdata/provider/admin/TestAPIJmeter1/1.0.0/api.&lt;/ns:Message&gt;&lt;ns:Timestamp&gt;2018-07-25T12:35:19.072+0530&lt;/ns:Timestamp&gt;&lt;ns:Details&gt;&lt;ns:Session&gt;&lt;ns:Chroot&gt;/_system/governance&lt;/ns:Chroot&gt;&lt;ns:Username&gt;admin&lt;/ns:Username&gt;&lt;ns:TenantId&gt;-1234&lt;/ns:TenantId&gt;&lt;/ns:Session&gt;&lt;ns:Operation&gt;&lt;ns:Path&gt;/_system/governance/apimgt/applicationdata/provider/admin/TestAPIJmeter1/1.0.0/api&lt;/ns:Path&gt;&lt;ns:EventType&gt;LifeCycleStateChanged&lt;/ns:EventType&gt;&lt;ns:ResourceType&gt;unknown&lt;/ns:ResourceType&gt;&lt;ns:LifecycleName&gt;APILifeCycle&lt;/ns:LifecycleName&gt;&lt;ns:OldLifecycleState&gt;Created&lt;/ns:OldLifecycleState&gt;&lt;ns:NewLifecycleState&gt;Published&lt;/ns:NewLifecycleState&gt;&lt;/ns:Operation&gt;&lt;ns:Server&gt;&lt;ns:HostName&gt;10.100.5.8&lt;/ns:HostName&gt;&lt;ns:Product&gt;&lt;ns:Name&gt;WSO2 API Manager&lt;/ns:Name&gt;&lt;ns:Version&gt;2.2.0&lt;/ns:Version&gt;&lt;/ns:Product&gt;&lt;ns:OS&gt;&lt;ns:Name&gt;Linux&lt;/ns:Name&gt;&lt;ns:Version&gt;4.13.0-45-generic&lt;/ns:Version&gt;&lt;ns:Architecture&gt;amd64&lt;/ns:Architecture&gt;&lt;/ns:OS&gt;&lt;ns:User&gt;&lt;ns:Name&gt;kasun&lt;/ns:Name&gt;&lt;ns:Country&gt;US&lt;/ns:Country&gt;&lt;ns:Language&gt;en&lt;/ns:Language&gt;&lt;ns:TimeZone&gt;Asia/Colombo&lt;/ns:TimeZone&gt;&lt;/ns:User&gt;&lt;ns:Java&gt;&lt;ns:Vendor&gt;Oracle Corporation&lt;/ns:Vendor&gt;&lt;ns:Version&gt;1.8.0_171&lt;/ns:Version&gt;&lt;ns:JVM&gt;&lt;ns:Name&gt;Java HotSpot(TM) 64-Bit Server VM&lt;/ns:Name&gt;&lt;ns:Version&gt;25.171-b11&lt;/ns:Version&gt;&lt;/ns:JVM&gt;&lt;/ns:Java&gt;&lt;/ns:Server&gt;&lt;/ns:Details&gt;&lt;/ns:Event&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/notification</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Notification and write into txt file service - HTTP Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;ns:Event xmlns:ns=&quot;http://wso2.org/ns/2011/01/event&#xd;
ing/registry/event&quot;&gt;&lt;ns:Message&gt;[APILifeCycle] The LifeCycle State Changed from &apos;Created&apos; to &apos;Published&apos; for resource at /_system/governance/apimgt/applicationdata/provider/admin/TestAPIJmeter1/1.0.0/api.&lt;/ns:Message&gt;&lt;ns:Timestamp&gt;2018-07-25T12:35:19.072+0530&lt;/ns:Timestamp&gt;&lt;ns:Details&gt;&lt;ns:Session&gt;&lt;ns:Chroot&gt;/_system/governance&lt;/ns:Chroot&gt;&lt;ns:Username&gt;admin&lt;/ns:Username&gt;&lt;ns:TenantId&gt;-1234&lt;/ns:TenantId&gt;&lt;/ns:Session&gt;&lt;ns:Operation&gt;&lt;ns:Path&gt;/_system/governance/apimgt/applicationdata/provider/admin/TestAPIJmeter1/1.0.0/api&lt;/ns:Path&gt;&lt;ns:EventType&gt;LifeCycleStateChanged&lt;/ns:EventType&gt;&lt;ns:ResourceType&gt;unknown&lt;/ns:ResourceType&gt;&lt;ns:LifecycleName&gt;APILifeCycle&lt;/ns:LifecycleName&gt;&lt;ns:OldLifecycleState&gt;Created&lt;/ns:OldLifecycleState&gt;&lt;ns:NewLifecycleState&gt;Published&lt;/ns:NewLifecycleState&gt;&lt;/ns:Operation&gt;&lt;ns:Server&gt;&lt;ns:HostName&gt;10.100.5.8&lt;/ns:HostName&gt;&lt;ns:Product&gt;&lt;ns:Name&gt;WSO2 API Manager&lt;/ns:Name&gt;&lt;ns:Version&gt;2.2.0&lt;/ns:Version&gt;&lt;/ns:Product&gt;&lt;ns:OS&gt;&lt;ns:Name&gt;Linux&lt;/ns:Name&gt;&lt;ns:Version&gt;4.13.0-45-generic&lt;/ns:Version&gt;&lt;ns:Architecture&gt;amd64&lt;/ns:Architecture&gt;&lt;/ns:OS&gt;&lt;ns:User&gt;&lt;ns:Name&gt;kasun&lt;/ns:Name&gt;&lt;ns:Country&gt;US&lt;/ns:Country&gt;&lt;ns:Language&gt;en&lt;/ns:Language&gt;&lt;ns:TimeZone&gt;Asia/Colombo&lt;/ns:TimeZone&gt;&lt;/ns:User&gt;&lt;ns:Java&gt;&lt;ns:Vendor&gt;Oracle Corporation&lt;/ns:Vendor&gt;&lt;ns:Version&gt;1.8.0_171&lt;/ns:Version&gt;&lt;ns:JVM&gt;&lt;ns:Name&gt;Java HotSpot(TM) 64-Bit Server VM&lt;/ns:Name&gt;&lt;ns:Version&gt;25.171-b11&lt;/ns:Version&gt;&lt;/ns:JVM&gt;&lt;/ns:Java&gt;&lt;/ns:Server&gt;&lt;/ns:Details&gt;&lt;/ns:Event&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/notificationwritetofile</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - RSET backend service for scenario testing" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="accountId" elementType="Argument">
              <stringProp name="Argument.name">accountId</stringProp>
              <stringProp name="Argument.value">12345</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">9094</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">sleeptime</stringProp>
              <stringProp name="Header.value">0</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="false">
          <collectionProp name="AuthManager.auth_list">
            <elementProp name="" elementType="Authorization">
              <stringProp name="Authorization.url"></stringProp>
              <stringProp name="Authorization.username">admin</stringProp>
              <stringProp name="Authorization.password">pass1</stringProp>
              <stringProp name="Authorization.domain"></stringProp>
              <stringProp name="Authorization.realm"></stringProp>
            </elementProp>
          </collectionProp>
        </AuthManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS POST  Request - Create Account" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;Account_Details&quot;:{&#xd;
      &quot;Bank_Account_No&quot;:&quot;${accountId}&quot;,&#xd;
      &quot;Name&quot;:&quot;Kasun&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/resttestaccount</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49587">201</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS GET Request - Retrive Account Details" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/resttestaccount/${accountId}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTPS PUT Request - Update Account Details" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
   &quot;Account_Details&quot;:{&#xd;
      &quot;Bank_Account_No&quot;:&quot;${accountId}&quot;,&#xd;
      &quot;Name&quot;:&quot;Updated Name - Kasun Updated&quot;&#xd;
   }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/resttestaccount/${accountId}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP DELETE Request - Delete Account Details" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/banktest/resttestaccount/${accountId}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
            <stringProp name="Assertion.test_field">SizeAssertion.response_network_size</stringProp>
            <stringProp name="SizeAssertion.size">300</stringProp>
            <intProp name="SizeAssertion.operator">6</intProp>
          </SizeAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
